generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Attack {
  id          Int      @id @default(autoincrement())
  familiar    Familiar @relation(fields: [familiar_id], references: [id])
  familiar_id Int
  name        String   @db.VarChar(255)
  effect      String   @db.VarChar(255)
}

model Element {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  familiars Familiar[]
  moves     Move[]
}

model Familiar {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  element    Element  @relation(fields: [element_id], references: [id])
  element_id Int
  passive    String   @db.VarChar(255)
  attack     Int
  defense    Int
  health     Int
  speed      Int
  attacks    Attack[]
}

model Item {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(255)
  effect String @db.VarChar(255)
}

model Move {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(255)
  element    Element @relation(fields: [element_id], references: [id])
  element_id Int
  effect     String  @db.VarChar(255)
}

// NextAuth Models

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}