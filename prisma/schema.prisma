generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// FamiliarDex
model Element {
  name      String     @id @db.VarChar(255)
  familiars Familiar[]
  moves     Art[]
}

model Familiar {
  name          String          @id @db.VarChar(255)
  element       Element         @relation(fields: [element_name], references: [name])
  element_name  String
  passive       String          @db.VarChar(255)
  attack        Int
  defense       Int
  health        Int
  speed         Int
  FamiliarSet   FamiliarSet[]
  FamiliarState FamiliarState[]
}

model Item {
  name      String      @id @db.VarChar(255)
  effect    String      @db.VarChar(255)
  ItemSet   ItemSet[]
  ItemState ItemState[]
}

model Art {
  name         String     @id @db.VarChar(255)
  element      Element    @relation(fields: [element_name], references: [name])
  element_name String
  effect       String     @db.VarChar(255)
  ArtSet       ArtSet[]
  ArtState     ArtState[]
}

// Management
model Team {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  player        User            @relation(fields: [player_id], references: [id])
  player_id     String
  FamiliarSet   FamiliarSet[]
  FamiliarState FamiliarState[]
}

model FamiliarSet {
  id            Int       @unique @default(autoincrement())
  team          Team      @relation(fields: [team_id], references: [id])
  team_id       Int
  familiar      Familiar  @relation(fields: [familiar_name], references: [name])
  familiar_name String
  position      Int
  ItemSet       ItemSet[]
  ArtSet        ArtSet[]

  @@id([team_id, position])
}

model ItemSet {
  id             Int         @unique @default(autoincrement())
  familiarset    FamiliarSet @relation(fields: [familiarset_id], references: [id])
  familiarset_id Int
  slot           Int
  item           Item        @relation(fields: [item_name], references: [name])
  item_name      String

  @@id([familiarset_id, slot])
}

model ArtSet {
  id             Int         @unique @default(autoincrement())
  familiarset    FamiliarSet @relation(fields: [familiarset_id], references: [id])
  familiarset_id Int
  slot           Int
  art            Art         @relation(fields: [art_name], references: [name])
  art_name       String

  @@id([familiarset_id, slot])
}

// Battle
model Battle {
  id           Int     @id @default(autoincrement())
  player_1     User    @relation("player1", fields: [player_1_id], references: [id])
  player_1_id  String
  player_2     User    @relation("player2", fields: [player_2_id], references: [id])
  player_2_id  String
  winner       User?   @relation("winner", fields: [winner_id], references: [id])
  winner_id    String?
  loser        User?   @relation("loser", fields: [loser_id], references: [id])
  loser_id     String?
  ruleset      Ruleset @relation(fields: [ruleset_name], references: [name])
  ruleset_name String
  Turn         Turn[]
}

model Ruleset {
  name        String   @id @db.VarChar(255)
  description String   @db.VarChar(255)
  Battle      Battle[]
}

model Turn {
  id         Int             @unique @default(autoincrement())
  battle     Battle          @relation(fields: [battle_id], references: [id])
  battle_id  Int
  turn       Int
  field      FieldState[]
  familiars  FamiliarState[]
  PlayerMove PlayerMove[]

  @@id([battle_id, turn])
}

model PlayerMove {
  id        Int           @unique @default(autoincrement())
  turn      Turn          @relation(fields: [turn_id], references: [id])
  turn_id   Int
  player    User          @relation(fields: [player_id], references: [id])
  player_id String
  type      MoveType      @relation(fields: [type_name], references: [name])
  type_name String
  move_name String
  source    FamiliarState @relation(fields: [source_id], references: [id])
  source_id Int
  targets   Target[]
}

model MoveType {
  name       String       @id @db.VarChar(255)
  PlayerMove PlayerMove[]
}

model FieldState {
  id         Int    @id @default(autoincrement())
  turn       Turn   @relation(fields: [turn_id], references: [id])
  turn_id    Int
  field      Field  @relation(fields: [field_name], references: [name])
  field_name String
}

model Field {
  name        String       @id @db.VarChar(255)
  description String       @db.VarChar(255)
  FieldState  FieldState[]
}

model FamiliarState {
  id            Int              @id @default(autoincrement())
  turn          Turn             @relation(fields: [turn_id], references: [id])
  turn_id       Int
  familiar      Familiar         @relation(fields: [familiar_name], references: [name])
  familiar_name String
  position      Int
  health        Int
  stamina       Int
  attack        Int
  defense       Int
  speed         Int
  onField       Boolean
  team          Team             @relation(fields: [team_id], references: [id])
  team_id       Int
  conditions    ConditionState[]
  items         ItemState[]
  arts          ArtState[]
  targets       Target[]
  PlayerMove    PlayerMove[]
}

model Target {
  id            Int           @unique @default(autoincrement())
  playermove    PlayerMove    @relation(fields: [playermove_id], references: [id])
  playermove_id Int
  target        FamiliarState @relation(fields: [target_id], references: [id])
  target_id     Int
}

model ConditionState {
  id               Int           @id @default(autoincrement())
  FamiliarState    FamiliarState @relation(fields: [familiarstate_id], references: [id])
  familiarstate_id Int
  condition        Condition     @relation(fields: [condition_name], references: [name])
  condition_name   String
  charges          Int
  duration         Int
}

model Condition {
  name           String           @id @db.VarChar(255)
  description    String           @db.VarChar(255)
  ConditionState ConditionState[]
}

model ItemState {
  id               Int           @id @default(autoincrement())
  familiarstate    FamiliarState @relation(fields: [familiarstate_id], references: [id])
  familiarstate_id Int
  item             Item          @relation(fields: [item_name], references: [name])
  item_name        String
}

model ArtState {
  id               Int           @id @default(autoincrement())
  familiarstate    FamiliarState @relation(fields: [familiarstate_id], references: [id])
  familiarstate_id Int
  art              Art           @relation(fields: [art_name], references: [name])
  art_name         String
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  team          Team[]
  player1       Battle[]     @relation("player1")
  player2       Battle[]     @relation("player2")
  winner        Battle[]     @relation("winner")
  loser         Battle[]     @relation("loser")
  PlayerMove    PlayerMove[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
