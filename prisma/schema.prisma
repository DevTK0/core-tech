generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// FamiliarDex

model Attack {
  id          Int      @id @default(autoincrement())
  familiar    Familiar @relation(fields: [familiar_id], references: [id])
  familiar_id Int
  name        String   @db.VarChar(255)
  effect      String   @db.VarChar(255)
}

model Element {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  familiars Familiar[]
  moves     Move[]
}

model Familiar {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  element     Element       @relation(fields: [element_id], references: [id])
  element_id  Int
  passive     String        @db.VarChar(255)
  attack      Int
  defense     Int
  health      Int
  speed       Int
  attacks     Attack[]
  FamiliarSet FamiliarSet[]
}

model Item {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(255)
  effect String @db.VarChar(255)
}

model Move {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  element    Element   @relation(fields: [element_id], references: [id])
  element_id Int
  effect     String    @db.VarChar(255)
  MoveSet    MoveSet[]
}

// Battle Prep
model Team {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  player      User          @relation(fields: [player_id], references: [id])
  player_id   String
  FamiliarSet FamiliarSet[]
}

model FamiliarSet {
  id          Int       @unique @default(autoincrement())
  team        Team      @relation(fields: [team_id], references: [id])
  team_id     Int
  familiar    Familiar  @relation(fields: [familiar_id], references: [id])
  familiar_id Int
  position    Int
  ItemSet     ItemSet[]
  MoveSet     MoveSet[]

  @@id([team_id, position])
}

model ItemSet {
  id             Int         @id @default(autoincrement())
  familiarset    FamiliarSet @relation(fields: [familiarset_id], references: [id])
  familiarset_id Int
  slot           Int
}

model MoveSet {
  id             Int         @id @default(autoincrement())
  familiarset    FamiliarSet @relation(fields: [familiarset_id], references: [id])
  familiarset_id Int
  slot           Int
  move           Move        @relation(fields: [move_id], references: [id])
  move_id        Int
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Team          Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
